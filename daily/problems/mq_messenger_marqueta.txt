DB improvements:
    1. Create a table of message texts with message hash as a primary key.
    2. Instead of message field in emails table, use hash as a foreign key.
    3. This allows us to dedup identical messages sent to multiple recepients
    4. BULK WRITE, cache the messages themselves in a journal (so perhaps the above new 
        table may have NULL for text which means it's cached in memory) until threshold/expiration
        is reached and data is cached.
    
Load balancing:
    1. Start multiple docker containers
    2. Setup a VM with nginx and round robin setup for multiple docker containers
    3. The containers will handle the snmp traffic, POSTs and issuing DB calls.

Bugs:
    2. Receive email:
        1. It appears there's a race condition in how the emails are received. When POST is processed
            we generate a unique ID for the email...that typically ends up being an index for DB. And 
            only then hte insertion into the DB is performed. If 2 POSTs are being processed at the 
            same time it's possible for them to generate a non-unique index, 1st one to insert it into
            DB wins, 2nd one errors out.
            We should let the emails table handle the indexing of the emails upon insertion.
        2. WHat if the insertion works but send back fails? Is htere a retry mechanism? How do we avoid
            being sent a POST with same hook for same email?

    1. Send email: Recepient receives a strange error, email is sent but not stored?
        1. First, the email unique ID is generated. That ID is possibly a hash...or it could be That
            the email content has some invalid characters that would cause a failure to insert the 
            email message into the DB. 2nd step in the process should be to sanitize all inputs and
            ensure that the ID is valid.
        2. We could rewrite the send to actually write the DB always. The backend should 
            retry to send the email if POST to /send fails.


Questions for interview:
1. How is the remote working out for the teams. Have the procedures/agile meetings changed?
2. Always on vs core hours?
2. What time is spent with customer issues. Elaborate on urgency/etc.
3. Is there a change in processes now that company is a bit more mature? Switching from startup to
    more enterprise?
4. How do you see the market growth potential? The insurance market is complicated, probably with a
    barrier to entry/moat.
